一、什么是kafka？
kafka是LinkedIn开发，使用java生态圈中的scala语言写的已经交给apache管理；kafka是基于分布式设计的，易于伸缩集群构建简单，kafka对于流天生就是持久。运用在大数据流数据处理、实时业务处理、消息订阅于发布。
kafka主要是一个数据存储平台、流处理平台；而具有发布流数据、和订阅流数据的功能因而可以当做消息中间件来使用。和其他mq不太一样，没有推送消息的说法。

题外话：
1、常见流处理：
storm\spark\flink\blink\kafka stream
2、和hadoop比较
可以当做实时版本的hadoop，
hadoop 大数据的基础组件；主要用于存储和定期处理大批量的数据（TB级别）
kafka 持续处理的大数据流；实时性高，低延迟
hadoop用于数据分析方面；kafka用于实时业务处理方面
3、scala ：函数式编程语言
4、和activemq、rabbitmq相比
kafka处理速度要比activemq、rabbitmq慢一些，kafka传递一个消息平均发费时间是兆秒，activemq和rabbitmq都是毫秒；
kafka更注重的是并发量，消息量；因此总整体上来看kafka性能很高。

二、特点：
1、支持多生产者和多消费者
2、数据基于磁盘的数据存储
3、高伸缩
4、高性能
三、使用场景：
1、活动跟踪：用户行为记录：用户在浏览网站时做的任何点击事件的记录
2、传递消息：简简单单的消息传递
3、收集指标和日志（应用程序和系统的度量指标，包含cpu使用百分比，内存使用百分比等等相关的健康值）
4、提交日志 ：例如集群的服务器下，某一台服务器节点做了一些变更，通过吧指令包装的消息发送给kafka传递到其他服务器节点上，让其他服务器节点做同样的操作。
5、流处理：实时处理流数据，统计、计算。

缺点：
运维难度高：kafka参数调整、虚拟机调优、操作系统调优。

四、kafka中的基本概念：
消息：和activemq、rabbitmq中消息概念差不多，是kafka中的数据单元。本质上是byte数组。具备压缩功能（需要消耗cpu性能）
消息的键：消息分区器会根据消息的键将消息存储到某一个分区
消息的批次：同一个主题和同一个分区上的一组消息；批量处理目的是为了减少网络开销，批次的数量需要根据情况来设定，第一个消息或者越靠前的消息等待时间就会越长。 
主题：kafka通过主题来区别消息的不同
分区：一个主题可以有多个分区，kafka接收生产者消息时，追加到某一个分区中；分区可以存放在不同的服务器节点上的，分区的设计体现了kafka的分布式的高伸缩性。
生产者：向kafka发送消息
消费者：向kafka取消息，kafka没有推送的概念，因此消费者必须主动向kafka拉取消息。
偏移量：消息在kafka上永久保存的，消息是在一个分区尾部不断追加的，没有删除的，因此通过偏移量来决定读取到哪个消息了。每个分区都有自己的偏移量。
消费者群组：消费同一个主题的多个消费者构成一个消费者群组，群组的作用：保证一个分区只被同一个群组的一个消费者使用。这样就不会重复消费了。
消费者的分区所有权：一个分区只能被一个消费者所有；一个消费者可以同时消费多个分区；这样就不会重复消费了。
broker：表示kafka的一个节点；主要功能有:设置每个分区的偏移量，接收和发送消息，一个broker每秒可以处理上千个分区，和百万级消息量（达到这个性能需要进行一些性能调优，包含操作系统、虚拟机，和相关硬件支持）
kafaka集群：kafaka集群中会选择一个broker做集群控制器，选主要依赖zookeeper选主功能选择出一个集群控制器，负责管理集群，分区分配，把分区分配给不同的broker，并监控每个broker的状态。
首领分区：一个主题有多个分区分布在多个broker上，在集群环境下分区分为首领分区和备份分区,每个分区只会会唯一一个首领分区，因此一个主题下有N个首领分区和N*（M-1）的备份分区。首领分区分布在不同的broker上。如果一个主题的分区在不同的broker上将大大提升消息的生产和消费的效率。所有的消息生产者和消费者只能在首领分区上进行操作。
消息持久化策略：消息可以保持一定的时间，例如一个月、半年等。会根据不同的主题配置不同的保留策略。
kafka强依赖zookeeper：kafka需要靠zookeeper进行选举。



